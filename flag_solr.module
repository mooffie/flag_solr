<?php

/**
 * @file
 *
 * Please see the README.txt file for general introduction to this module.
 */

include_once dirname(__FILE__) . '/flag_solr.facets.inc';

/**
 * Implements hook_apachesolr_update_index().
 *
 * Here we add Solr fields to the document, based on the flags set on them.
 */
function flag_solr_apachesolr_update_index($document, $node, $namespace) {
  if (($flaggings_by_user = flag_get_content_flags('node', $node->nid))) {
    foreach ($flaggings_by_user as $uid => $flaggings_by_fid) {
      foreach ($flaggings_by_fid as $flagging) {
        if (($flag = flag_get_flag(NULL, $flagging->fid))) {
          $document->setField('bs_flag_' . $flag->name . '_flagged', TRUE);
          // For non-global flags, we also record each flagging user in a Solr multi-valued field.
          if (!$flag->global) {
            $document->setMultiValue('im_flag_' . $flag->name . '_uid', $flagging->uid);
          }
        }
      }
    }
  }
  //_flag_solr_dsm($document);
}

/**
 * Implements hook_flag().
 *
 * Whenever a node is flagged (or unflagged) we tell ApacheSolr to queue it for
 * re-indexing.
 */
function flag_solr_flag($action, $flag, $content_id) {
  if ($flag->content_type == 'node') {
    apachesolr_mark_node($content_id);
  }
}

/**
 * Implements hook_apachesolr_facets().
 */
function flag_solr_apachesolr_facets() {
  $facets = array();

  foreach (flag_get_flags() as $flag) {

    $facet = new FlagFacetByAnybody($flag->name);
    $facets[ $facet->get_delta() ] = $facet->get_definition();

    if (!$flag->global) {
      $facet = new FlagFacetBySelf($flag->name);
      $facets[ $facet->get_delta() ] = $facet->get_definition();
    }

  }

  return $facets;
}

/**
 * Implements hook_block().
 */
function flag_solr_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks = array();
      foreach (FlagFacet::get_enabled_facets() as $facet) {
        $blocks[ $facet->get_delta() ] = $facet->get_block_definition();
      }
      return $blocks;

    case 'configure':
      if (($facet = FlagFacet::by_id($delta))) {
        return $facet->block_form();
      }
      break;

    case 'save':
      if (($facet = FlagFacet::by_id($delta))) {
        return $facet->block_form_save($edit);
      }
      break;

    case 'view':
      if (apachesolr_has_searched()) {
        // Get the query and response. Without these no blocks make sense.
        $response = apachesolr_static_response_cache();
        if (empty($response)) {
          return;
        }
        $query = apachesolr_current_query();

        if (($facet = FlagFacet::by_id($delta)) &&
            $facet->is_enabled() &&
            $facet->is_visible($query)) {
          return $facet->block($response, $query);
        }
      }
      break;
  }
}

/**
 * Implements hook_apachesolr_modify_query().
 *
 * Here we allow unconventional facets to alter the Solr query directly.
 */
function flag_solr_apachesolr_modify_query($query, &$params, $caller) {
  foreach (FlagFacet::get_enabled_facets() as $facet) {
    $facet->modify_query($query, $params, $caller);
  }
  _flag_solr_dsm($params);
}

/**
 * Implements hook_theme().
 */
function flag_solr_theme() {
  return array(
    'apachesolr_breadcrumb_flag' => array(
      'arguments' => array('field' => NULL, 'exclude' => FALSE),
    ),
  );
}

/**
 * Implements hook_apachesolr_theme_breadcrumb_alter().
  *
 * He we direct ApacheSolr to the real theming function.
 */
function flag_solr_apachesolr_theme_breadcrumb_alter(&$breadcrumb_name) {
  if (FlagFacet::by_id($breadcrumb_name)) {
    $breadcrumb_name = 'apachesolr_breadcrumb_flag';
  }
}

function theme_apachesolr_breadcrumb_flag($filter) {
  if (($facet = FlagFacet::by_id($filter['#name']))) {
    return $facet->get_breadcrumb_value($filter['#exclude']);
  }
}
